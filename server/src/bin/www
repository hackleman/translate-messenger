require('dotenv').config();

/**
 * Module dependencies.
 */
const http = require('http');
const express = require('express');
const { init } = require('../app');
const { startDatabase, seedDatabase, resetDatabase } = require('../db');
const { User, Conversation, Message } = require('../db/entity');
const onlineUsers = require('../onlineUsers');
const activeUsers = require('../activeUsers');

const app = express()
/**
 * Setup and initialize middlewares
 */

init(app);

/**
 * Start the DB connection pool
 */
startDatabase()
  .then(async (conn) => {
    console.log(process.env.NODE_ENV)
    if (process.env.NODE_ENV == 'test') {
      await resetDatabase();
      await seedDatabase();
    };

    console.log(await conn.getRepository(User).count());
    console.log(await conn.getRepository(Message).count());
    console.log(await conn.getRepository(Conversation).count());
  });

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || 3000);
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */
const io = require("socket.io")(server);

io.on("connection", (socket) => {
    socket.on("go-online", (id) => {
        if (!onlineUsers.includes(id)) {
          onlineUsers.push(id)
        }

        socket.broadcast.emit("add-online-user", id);
    });

    socket.on("new-message", (data) => {
      socket.broadcast.emit("new-message", data);
    });

    socket.on("new-conversation", (data) => {
      socket.broadcast.emit("new-conversation", data);
    })

    socket.on("update-conversation", (data) => {
      const { userId, otherUser} = data;

      activeUsers[userId] = [otherUser.id];
      socket.broadcast.emit("update-conversation", data);
    })

    socket.on("logout", (id) => {
      if (onlineUsers.includes(id)) {
        userIndex = onlineUsers.indexOf(id);
        onlineUsers.splice(userIndex, 1);
        socket.broadcast.emit("remove-offline-user", id);
      }
    })
})

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
    // port number
    return port;
    }
    
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
